import sys
import logging
import threading
import time
from concurrent.futures import ThreadPoolExecutor
import asyncio

# Import c√°c module ƒë√£ t·ªëi ∆∞u
from config import SystemConfig, GUIManager
from email_handler import EmailHandler
from functions import SystemFunctions

# Modules b√™n ngo√†i
from QUET_BSX import OptimizedLPR
from payment import PaymentManager
from db_api import DatabaseAPI_instance as db_api
from websocket_server import manager as websocket_manager
from init_data import check_and_recover_data  # Auto data recovery

# C·∫•u h√¨nh logging - Ch·ªâ hi·ªán WARNING v√† ERROR
logging.basicConfig(
    level=logging.WARNING,
    format='[%(levelname)s] %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)

# T·∫Øt logs kh√¥ng c·∫ßn thi·∫øt
logging.getLogger('httpx').setLevel(logging.ERROR)
logging.getLogger('httpcore').setLevel(logging.ERROR)

logger = logging.getLogger('XParking')

class XParkingSystem:
    def __init__(self):
        """Kh·ªüi t·∫°o h·ªá th·ªëng XParking"""
        logger.info("‚öôÔ∏è  Kh·ªüi t·∫°o modules...")
        
        # Kh·ªüi t·∫°o c√°c th√†nh ph·∫ßn c·ªët l√µi
        self.config_manager = SystemConfig()
        self.gui_manager = GUIManager(self.config_manager)
        self.lpr_system = OptimizedLPR()
        self.payment_manager = PaymentManager(self)
        self.db_api = db_api  # S·ª≠ d·ª•ng global instance
        self.email_handler = EmailHandler(self.config_manager)
        
        # Kh·ªüi t·∫°o Functions ch√≠nh - db_api ƒë√£ l√† DatabaseAPI
        self.functions = SystemFunctions(
            self.config_manager, self.gui_manager, self.lpr_system, 
            self.db_api, self.payment_manager, self.email_handler, self.db_api
        )
        
        # Kh·ªüi t·∫°o executor pool cho x·ª≠ l√Ω song song
        self.executor = ThreadPoolExecutor(max_workers=8)
        
        # GUI root reference
        self.root = None
        
        logger.info("‚úÖ Modules OK")

    def run(self):
        """Ch·∫°y h·ªá th·ªëng ch√≠nh"""
        try:
            logger.info("üöÄ Kh·ªüi ƒë·ªông XParking...")
            
            # 0. Ki·ªÉm tra v√† kh√¥i ph·ª•c d·ªØ li·ªáu
            logger.info("[1/4] Ki·ªÉm tra d·ªØ li·ªáu...")
            if not check_and_recover_data():
                logger.error("‚ùå Kh√¥ng th·ªÉ kh√¥i ph·ª•c d·ªØ li·ªáu! D·ª´ng h·ªá th·ªëng.")
                return
            
            # 1. Kh·ªüi t·∫°o GUI
            logger.info("[2/4] Kh·ªüi t·∫°o GUI...")
            self.root = self.gui_manager.init_gui(self)
            
            # 2. Kh·ªüi t·∫°o Supabase realtime
            logger.info("[3/4] Supabase realtime...")
            self.root.after(100, self._init_supabase_realtime)
            
            # 3. Kh·ªüi t·∫°o delayed components
            logger.info("[4/4] Components...")
            self.root.after(200, self._delayed_init)
            
            logger.info("‚úÖ H·ªá th·ªëng s·∫µn s√†ng!")
            
            # 4. Ch·∫°y GUI main loop
            self.root.mainloop()
            
        except KeyboardInterrupt:
            logger.info("Nh·∫≠n l·ªánh ng·∫Øt t·ª´ b√†n ph√≠m")
        except Exception as e:
            logger.error(f"L·ªói ch·∫°y h·ªá th·ªëng: {e}")
            import traceback
            traceback.print_exc()
        finally:
            self.shutdown()

    def _init_supabase_realtime(self):
        """Kh·ªüi t·∫°o Supabase realtime connections"""
        try:
            success = db_api.init_realtime_subscriptions()
            if success:
                logger.info("‚úÖ Realtime OK")
            else:
                logger.warning("‚ö†Ô∏è  Realtime b·ªè qua")
        except Exception as e:
            logger.warning("‚ö†Ô∏è  Realtime b·ªè qua")

    def _delayed_init(self):
        """Kh·ªüi t·∫°o c√°c th√†nh ph·∫ßn sau khi GUI ƒë√£ s·∫µn s√†ng"""
        try:
            # K·∫øt n·ªëi MQTT
            mqtt_success = self.functions.init_mqtt()
            if mqtt_success:
                logger.info("‚úÖ MQTT OK")
            else:
                logger.warning("‚ö†Ô∏è  MQTT b·ªè qua")
            self.gui_manager.update_status('mqtt_status', mqtt_success)
            
            # Kh·ªüi t·∫°o cameras
            cam_success = self.gui_manager.init_cameras(self.gui_manager.update_status)
            if cam_success:
                logger.info("‚úÖ Cameras OK")
            else:
                logger.warning("‚ö†Ô∏è  Cameras b·ªè qua")
            
            # Load AI model trong background
            self.gui_manager.update_status('ai_status', False)
            threading.Thread(target=self._init_ai_model, daemon=True).start()
            
            # Gas sensor m·∫∑c ƒë·ªãnh OK
            self.gui_manager.update_status('gas_status', True)
            
            logger.info("‚úÖ Components OK")
            
        except Exception as e:
            logger.error(f"L·ªói kh·ªüi t·∫°o delayed components: {e}")

    def _init_ai_model(self):
        """Kh·ªüi t·∫°o AI model trong background thread"""
        try:
            if self.lpr_system.load_models():
                if self.root:
                    self.root.after(0, lambda: self.gui_manager.update_status('ai_status', True))
                logger.info("‚úÖ AI model OK")
            else:
                if self.root:
                    self.root.after(0, lambda: self.gui_manager.update_status('ai_status', False))
                logger.warning("‚ö†Ô∏è  AI model b·ªè qua")
        except Exception as e:
            logger.warning("‚ö†Ô∏è  AI model b·ªè qua")
            if self.root:
                self.root.after(0, lambda: self.gui_manager.update_status('ai_status', False))

    def shutdown(self):
        """T·∫Øt h·ªá th·ªëng an to√†n"""
        logger.info("üõë ƒêang t·∫Øt...")
        try:
            if hasattr(self, 'functions'):
                self.functions.shutdown()
            if hasattr(self, 'executor'):
                self.executor.shutdown(wait=True)
            # ƒê√≥ng Database connections
            if hasattr(db_api, 'client'):
                logger.info("üîå ƒê√≥ng Database")
        except Exception as e:
            logger.error(f"L·ªói khi t·∫Øt functions: {e}")
        
        logger.info("‚úÖ ƒê√£ t·∫Øt")

    # C√°c ph∆∞∆°ng th·ª©c h·ªó tr·ª£ cho PaymentManager v√† c√°c modules kh√°c
    def update_slot_status(self, slot_id, status):
        """C·∫≠p nh·∫≠t tr·∫°ng th√°i slot"""
        if hasattr(self, 'gui_manager'):
            self.gui_manager.update_slot_status(slot_id, status)

    def update_status(self, key, is_active):
        """C·∫≠p nh·∫≠t status indicator"""
        if hasattr(self, 'gui_manager'):
            self.gui_manager.update_status(key, is_active)

# Entry point ch√≠nh
if __name__ == "__main__":
    system = None
    try:
        system = XParkingSystem()
        system.run()
    except Exception as e:
        logger.error(f"L·ªói kh·ªüi ƒë·ªông h·ªá th·ªëng: {e}")
        import traceback
        traceback.print_exc()
    finally:
        if system:
            system.shutdown()