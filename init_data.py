"""
Auto Data Recovery & Initialization
T·ª± ƒë·ªông kh√¥i ph·ª•c v√† ki·ªÉm tra d·ªØ li·ªáu khi kh·ªüi ƒë·ªông Python
"""

import logging
from db_api import DatabaseAPI_instance as db_api

logging.basicConfig(level=logging.WARNING, format='[%(levelname)s] %(message)s')

# T·∫Øt HTTP logs
logging.getLogger('httpx').setLevel(logging.ERROR)
logging.getLogger('httpcore').setLevel(logging.ERROR)

logger = logging.getLogger(__name__)

def check_and_recover_data():
    """
    Ki·ªÉm tra v√† kh√¥i ph·ª•c d·ªØ li·ªáu c·∫ßn thi·∫øt
    """
    logger.info("üîç Ki·ªÉm tra d·ªØ li·ªáu...")
    
    try:
        # 1. Ki·ªÉm tra k·∫øt n·ªëi database
        logger.info("[1/5] K·∫øt n·ªëi Supabase...")
        slots_data = db_api.get_cached_slots_status()
        if slots_data and isinstance(slots_data, dict):
            slots = slots_data.get('available_slots', [])
            logger.info(f"‚úÖ Supabase OK - {slots_data.get('total_slots', 0)} slots")
        else:
            logger.error("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi Supabase!")
            return False
        
        # 2. Ki·ªÉm tra v√† ƒë·ªìng b·ªô slots
        logger.info("[2/5] ƒê·ªìng b·ªô slots...")
        expected_slots = ['A01', 'A02', 'A03', 'A04']
        
        # L·∫•y t·∫•t c·∫£ slots t·ª´ database
        all_slots = db_api.client.table('parking_slots').select('*').execute().data
        
        for slot_id in expected_slots:
            slot_exists = any(s['id'] == slot_id for s in all_slots)
            if not slot_exists:
                logger.warning(f"‚ö†Ô∏è  T·∫°o slot {slot_id}...")
                # T·∫°o slot m·ªõi n·∫øu c·∫ßn
                slot_data = {
                    'id': slot_id,
                    'status': 'empty',
                    'rfid_assigned': 'empty',
                    'vehicle_id': None
                }
                result = db_api.client.table('parking_slots').insert(slot_data).execute()
                if result.data:
                    logger.info(f"‚úÖ ƒê√£ t·∫°o slot {slot_id}")
            else:
                logger.info(f"‚úÖ Slot {slot_id} OK")
        
        # 3. Ki·ªÉm tra RFID pool
        logger.info("[3/5] Ki·ªÉm tra RFID...")
        rfids = db_api.get_available_rfids()
        
        if not rfids:
            logger.warning("‚ö†Ô∏è  T·∫°o RFID m·∫∑c ƒë·ªãnh...")
            default_rfids = ['RFID001', 'RFID002', 'RFID003', 'RFID004', 'RFID005', 
                           'RFID006', 'RFID007', 'RFID008']
            
            for rfid_uid in default_rfids:
                rfid_data = {
                    'uid': rfid_uid,
                    'status': 'available',
                    'assigned_to_vehicle': None,
                    'usage_count': 0
                }
                result = db_api.client.table('rfid_pool').insert(rfid_data).execute()
                if result.data:
                    logger.info(f"‚úÖ ƒê√£ t·∫°o RFID {rfid_uid}")
        else:
            logger.info(f"‚úÖ T√¨m th·∫•y {len(rfids)} RFID kh·∫£ d·ª•ng")
            
            # Ki·ªÉm tra RFID b·ªã stuck (assigned nh∆∞ng kh√¥ng c√≥ vehicle)
            all_rfids = db_api.client.table('rfid_pool').select('*').execute().data
            for rfid in all_rfids:
                if rfid['status'] == 'assigned':
                    # Check n·∫øu vehicle t∆∞∆°ng ·ª©ng ƒë√£ exit
                    vehicle_id = rfid.get('assigned_to_vehicle')
                    if vehicle_id:
                        vehicle = db_api.client.table('vehicles').select('*').eq('id', vehicle_id).single().execute().data
                        if vehicle and vehicle['status'] == 'exited':
                            # Release RFID
                            logger.warning(f"‚ö†Ô∏è  RFID {rfid['uid']} b·ªã stuck - ƒëang gi·∫£i ph√≥ng...")
                            db_api.client.table('rfid_pool').update({
                                'status': 'available',
                                'assigned_to_vehicle': None
                            }).eq('uid', rfid['uid']).execute()
                            logger.info(f"‚úÖ ƒê√£ gi·∫£i ph√≥ng RFID {rfid['uid']}")
        
        # 4. Ki·ªÉm tra vehicles
        logger.info("[4/5] Ki·ªÉm tra xe trong b√£i...")
        vehicles_in_parking = db_api.client.table('vehicles').select('*').eq('status', 'in_parking').execute().data
        
        if vehicles_in_parking:
            logger.info(f"üìä C√≥ {len(vehicles_in_parking)} xe ƒëang trong b√£i")
            
            for vehicle in vehicles_in_parking:
                slot_id = vehicle['slot_id']
                
                # Check slot status - l·∫•y t·ª´ all_slots
                slot = next((s for s in all_slots if s['id'] == slot_id), None)
                if slot:
                    if slot['status'] != 'occupied':
                        logger.warning(f"‚ö†Ô∏è  Fix slot {slot_id}")
                        # Fix slot status
                        db_api.update_slot_status(slot_id, 'occupied', vehicle['rfid_tag'])
                        logger.info(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t slot {slot_id} ‚Üí occupied")
                    else:
                        logger.info(f"‚úÖ Slot {slot_id} OK")
        else:
            logger.info("‚úÖ Kh√¥ng c√≥ xe n√†o trong b√£i")
        
        # 5. Expire old payments
        logger.info("[5/5] D·ªçn d·∫πp payments...")
        expired_count = db_api.expire_old_payments()
        logger.info(f"‚úÖ Expired {expired_count} payments")
        
        # Clear cache
        db_api.clear_cache()
        logger.info("‚úÖ Cache cleared")
        
        logger.info("‚úÖ D·ªØ li·ªáu ƒë√£ s·∫µn s√†ng!")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå L·ªói: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    # Test standalone
    success = check_and_recover_data()
    if success:
        print("\n‚úÖ H·ªá th·ªëng s·∫µn s√†ng!")
    else:
        print("\n‚ùå C√≥ l·ªói x·∫£y ra!")

