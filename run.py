
import sys
import os
import subprocess
import threading
import time
import logging
import signal
from pathlib import Path

# Th√™m th∆∞ m·ª•c hi·ªán t·∫°i v√†o Python path
current_dir = Path(__file__).parent
sys.path.insert(0, str(current_dir))

# Setup logging - Ch·ªâ ghi file, kh√¥ng hi·ªán console
logging.basicConfig(
    level=logging.INFO,
    format='[%(levelname)s] %(message)s',
    handlers=[
        logging.FileHandler('xparking_system.log', encoding='utf-8')
    ]
)

# Th√™m console handler ri√™ng cho th√¥ng b√°o quan tr·ªçng
console_handler = logging.StreamHandler(sys.stdout)
console_handler.setLevel(logging.WARNING)  # Ch·ªâ hi·ªán WARNING v√† ERROR
logging.getLogger().addHandler(console_handler)

# T·∫Øt t·∫•t c·∫£ logs kh√¥ng c·∫ßn thi·∫øt
logging.getLogger('httpx').setLevel(logging.CRITICAL)
logging.getLogger('httpcore').setLevel(logging.CRITICAL)
logging.getLogger('uvicorn').setLevel(logging.CRITICAL)
logging.getLogger('uvicorn.access').setLevel(logging.CRITICAL)
logging.getLogger('uvicorn.error').setLevel(logging.CRITICAL)

# T·∫Øt stderr c·ªßa OpenCV
import os
os.environ['OPENCV_LOG_LEVEL'] = 'SILENT'
os.environ['OPENCV_VIDEOIO_DEBUG'] = '0'

logger = logging.getLogger('XParking.Launcher')

class SystemLauncher:
    def __init__(self):
        self.processes = {}
        self.shutdown_event = threading.Event()
        
    def check_dependencies(self):
        """Ki·ªÉm tra c√°c dependencies c·∫ßn thi·∫øt"""
        required_modules = [
            'cv2', 'tkinter', 'PIL', 'paho.mqtt.client', 
            'requests', 'supabase', 'websockets', 'fastapi'
        ]
        
        missing_modules = []
        
        for module in required_modules:
            try:
                if module == 'cv2':
                    import cv2
                elif module == 'tkinter':
                    import tkinter
                elif module == 'PIL':
                    from PIL import Image
                elif module == 'paho.mqtt.client':
                    import paho.mqtt.client
                elif module == 'supabase':
                    from supabase import create_client
                elif module == 'websockets':
                    import websockets
                elif module == 'fastapi':
                    from fastapi import FastAPI
                else:
                    __import__(module)
            except ImportError:
                missing_modules.append(module)
        
        if missing_modules:
            logger.error("Thi·∫øu c√°c module b·∫Øt bu·ªôc:")
            for module in missing_modules:
                logger.error(f"  - {module}")
            logger.error("Ch·∫°y l·ªánh: pip install -r requirements_supabase.txt")
            return False
        
        return True
    
    def start_websocket_server(self):
        """Kh·ªüi ƒë·ªông WebSocket server"""
        try:
            
            # Import v√† ch·∫°y WebSocket server
            from websocket_server import run_websocket_server
            
            def run_websocket():
                try:
                    run_websocket_server(host="localhost", port=8080)
                except Exception as e:
                    logger.error(f"L·ªói WebSocket server: {e}")
            
            websocket_thread = threading.Thread(target=run_websocket, daemon=True)
            websocket_thread.start()
            
            # ƒê·ª£i server kh·ªüi ƒë·ªông
            time.sleep(2)
            
            # Test connection
            import requests
            try:
                response = requests.get("http://localhost:8080/api/status", timeout=5)
                if response.status_code == 200:
                    pass
                return True
            except:
                pass
            
            logger.warning("‚ö†Ô∏è  WebSocket ch∆∞a s·∫µn s√†ng")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå WebSocket l·ªói: {e}")
            return False
    
    def test_supabase_connection(self):
        """Test k·∫øt n·ªëi Supabase"""
        try:
            pass
            from db_api import DatabaseAPI_instance as db
            
            # Test basic connection
            result = db.get_available_slots()
            pass
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Database l·ªói: {e}")
            logger.error("H·ªá th·ªëng y√™u c·∫ßu Supabase ƒë·ªÉ ho·∫°t ƒë·ªông!")
            return False
    
    def start_main_application(self):
        """Kh·ªüi ƒë·ªông ·ª©ng d·ª•ng ch√≠nh"""
        try:
            pass
            
            from main import XParkingSystem
            
            # T·∫°o v√† ch·∫°y h·ªá th·ªëng
            system = XParkingSystem()
            system.run()
            
        except KeyboardInterrupt:
            logger.info("Nh·∫≠n l·ªánh d·ª´ng t·ª´ b√†n ph√≠m")
        except Exception as e:
            logger.error(f"L·ªói ·ª©ng d·ª•ng ch√≠nh: {e}")
            import traceback
            traceback.print_exc()
    
    def setup_signal_handlers(self):
        """Thi·∫øt l·∫≠p signal handlers"""
        def signal_handler(sig, frame):
            logger.info(f"Nh·∫≠n signal {sig} - ƒëang t·∫Øt h·ªá th·ªëng...")
            self.shutdown_event.set()
            sys.exit(0)
        
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
    
    def print_system_info(self):
        """In th√¥ng tin h·ªá th·ªëng"""
        pass
        
        # Test camera
        try:
            import cv2
            pass
            
            cap = cv2.VideoCapture(0)
            if cap.isOpened():
                pass
                cap.release()
            else:
                logger.warning("‚ö†Ô∏è  Camera: Kh√¥ng OK")
        except Exception as e:
            logger.error(f"Ki·ªÉm tra camera l·ªói: {e}")
        
        # Test Supabase
        supabase_ok = self.test_supabase_connection()
        
        pass
        
        return supabase_ok
    
    def run(self):
        """Ch·∫°y to√†n b·ªô h·ªá th·ªëng"""
        try:
            pass
            # logger.info("üÖøÔ∏è  XPARKING SYSTEM")
            
            # Setup signal handlers
            self.setup_signal_handlers()
            
            # Ki·ªÉm tra dependencies
            if not self.check_dependencies():
                logger.error("‚ùå L·ªói: Thi·∫øu dependencies")
                return False
            
            # In th√¥ng tin h·ªá th·ªëng
            supabase_available = self.print_system_info()
            
            # Kh·ªüi ƒë·ªông WebSocket server (n·∫øu Supabase available)
            if supabase_available:
                websocket_ok = self.start_websocket_server()
                if not websocket_ok:
                    logger.warning("‚ö†Ô∏è  WebSocket b·ªè qua")
            
            # Kh·ªüi ƒë·ªông ·ª©ng d·ª•ng ch√≠nh
            print("\n" + "="*60)
            print("‚úÖ H·ªÜ TH·ªêNG KH·ªûI ƒê·ªòNG TH√ÄNH C√îNG")
            print("="*60 + "\n")
            
            self.start_main_application()
            
            return True
            
        except Exception as e:
            logger.error(f"L·ªói kh·ªüi ƒë·ªông h·ªá th·ªëng: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    def cleanup(self):
        """D·ªçn d·∫πp khi t·∫Øt h·ªá th·ªëng"""
        logger.info("ƒêang d·ªçn d·∫πp h·ªá th·ªëng...")
        
        for name, process in self.processes.items():
            try:
                if process and process.poll() is None:
                    logger.info(f"ƒêang d·ª´ng {name}...")
                    process.terminate()
                    process.wait(timeout=5)
            except:
                pass
        
        logger.info("D·ªçn d·∫πp ho√†n t·∫•t")

def main():
    """H√†m main"""
    launcher = SystemLauncher()
    
    try:
        success = launcher.run()
        if not success:
            logger.error("Kh·ªüi ƒë·ªông h·ªá th·ªëng th·∫•t b·∫°i")
            sys.exit(1)
    except KeyboardInterrupt:
        logger.info("Nh·∫≠n l·ªánh d·ª´ng t·ª´ b√†n ph√≠m")
    except Exception as e:
        logger.error(f"L·ªói kh√¥ng mong mu·ªën: {e}")
        sys.exit(1)
    finally:
        launcher.cleanup()

if __name__ == "__main__":
    main()
